@inject StateContainer stateContainer;
@inject IJSRuntime JSRuntime

<ConfirmedText 
StyleClass="text"
LabelClass="memberText"
Label="Opening"
Question="Thank you for calling member services. My name is ___. In order to better assist you, may I please have your member id?"
Value="@greetedMember"
OnOptionSelected="@((value) => greetedMember = value)"
/>
<p class="toolText">IMPORTANT: If the caller asks a question or makes a statement instead of providing a member ID then this could be a <span style="color:yellow">CMS TEST CALL!</span></p>




@if(greetedMember == true)
{
	<YesOrNoChoiceBubble
	StyleClass="taskText"
	Question="Were you able to verify HIPPA?"
	Value="@verifiedHIPPA"
	OnOptionSelected="@((value) => {
			verifiedHIPPA = value;
			if(value == 0)
				stateContainer.HippaVerified = true;
		})"
	/>

}

@if(greetedMember && stateContainer.HippaVerified == true)
{
	<ConfirmedText 
	StyleClass="text" 
	LabelClass="memberText"
	Label="Offer Assitance"
	Question="How may I assist you today?"
	Value="@offeredAssistance"
	OnOptionSelected="@((value) => offeredAssistance = value)"
	/>

	if(greetedMember &&  offeredAssistance == true)
	{
		<ConfirmedText StyleClass="taskText"
		LabelClass="memberText"
		Label="Probe"
		Question="Ask probing questions and repeat the concern back to caller"
		Value="@probed"
		OnOptionSelected="@((value) => probed = value)" />

	}
	if(greetedMember && offeredAssistance == true && probed == true)
	{
		<ConfirmedText StyleClass="text"
		LabelClass="memberText"
		Label="Willingness Statement"
		Question="I'll happily assist with this today!"
		Value="@willingnessStatement"
		OnOptionSelected="@((value) => willingnessStatement = value)" />
	}

	if (greetedMember && offeredAssistance && probed && willingnessStatement)
	{
		<ConfirmedText StyleClass="text"
		LabelClass="memberText"
		Label="FCR"
		Question="Is this the first time you're calling about this?"
		Value="@firstTimeCalling"
		OnOptionSelected="@((value) => firstTimeCalling = value)" />


		<YesOrNoChoiceBubble
		StyleClass="memberText"
		Question="First time calling?"
		Value="@isFirstCall"
		OnOptionSelected="@((value) => isFirstCall = value)"
		/>
		if(isFirstCall == 1)
		{
			<p class="taskText">This is a repeat caller and should be transferred to MET</p>
		}
	}

	if (greetedMember && offeredAssistance && probed && willingnessStatement && firstTimeCalling)
	{
		<ConfirmedText StyleClass="taskText"
		LabelClass="memberText"
		Label="Empathy"
		Question="If applicable show member empathy about anything they express dissatisfaction with.'"
		Value="@shownEmpathy"
		OnOptionSelected="@((value) => shownEmpathy = value)" />

	}

	if (greetedMember && offeredAssistance && probed && willingnessStatement && firstTimeCalling && shownEmpathy)
	{
		<ConfirmedText StyleClass="text"
		LabelClass="memberText"
		Label="Rapport"
		Question="Is it ok if I call you by your first name?"
		Value="@builtRapport"
		OnOptionSelected="@((value) => builtRapport = value)" />
	}

	if(greetedMember && offeredAssistance && probed && willingnessStatement && firstTimeCalling && shownEmpathy && builtRapport)
	{
		<ConfirmedText StyleClass="text"
		LabelClass="memberText"
		Label="Member Summary"
		Question="I see you're plan is currently effective as of (*PLAN START DATE*) end date of (*PLAN END DATE*) under (*PLAN NAME*), the primary care physician we have on file for you is (*PCP*) at (*PPG*)"
		Value="@planSummary"
		OnOptionSelected="@((value) => planSummary = value)" />
		<p class="taskText">IMPORTANT: If member does not have a PCP assigned or they said the one you listed above is incorrect be sure to resolve this before the end of the call.</p>
	}
	if (greetedMember && offeredAssistance && probed && willingnessStatement && firstTimeCalling && shownEmpathy && builtRapport && planSummary)
	{


		<ConfirmedText StyleClass="taskText"
		LabelClass="memberText"
		Label="Demographics"
		Question="Confirm if any demographics have changed(phone number, email address, street address"
		Value="@demographics"
		OnOptionSelected="@((value) => demographics = value)" />
		<p class="taskText">IMPORTANT: If members accounts has any <span class="memberText">alerts ⚠️</span> be sure to click them and read them back word for word to the member.</p>


	}
	if (greetedMember && offeredAssistance && probed && willingnessStatement
	&& firstTimeCalling && shownEmpathy && builtRapport && planSummary && demographics)
	{
		<ConfirmedText StyleClass="taskText"
		LabelClass="memberText"
		Label="Professionalism"
		Question="When placing member on hold, inform the member why you need to place the call on hold, how long it will be ask for permission, then thank them. Be sure to come back in the timeframe promised. I need to place the call on a brief hold for 2-3 minutes while I reach out to your providers office. Is that alright? Thank you so much for your patience. Please remain on the line."					   
		Value="@professionalism"
		OnOptionSelected="@((value) => professionalism = value)" />
	}

	if (greetedMember && offeredAssistance && probed && willingnessStatement
	&& firstTimeCalling && shownEmpathy && builtRapport && planSummary && demographics && professionalism)
	{
		<ConfirmedText StyleClass="taskText"
		LabelClass="memberText"
		Label="Compliance"
		Question="Read all RED disclaimers failing to do so could result in a CTM"
		Value="@disclaimers"
		OnOptionSelected="@((value) => disclaimers = value)" />
	}
	if (greetedMember && offeredAssistance && probed && willingnessStatement
		&& firstTimeCalling && shownEmpathy && builtRapport && planSummary && demographics && professionalism && disclaimers)
	{
		<ConfirmedText StyleClass="memberText"
		LabelClass="memberText"
		Label="FCR"
		Question="Verify members concern has been addressed and if member understood the information provided"
		Value="@fcrVerified"
		OnOptionSelected="@((value) => fcrVerified = value)" />
	}
	if (greetedMember && offeredAssistance && probed && willingnessStatement
	&& firstTimeCalling && shownEmpathy && builtRapport && planSummary && demographics && professionalism 
	&& disclaimers && fcrVerified)
	{
		<ConfirmedText StyleClass="text"
		LabelClass="memberText"
		Label="Additional Assistance"
		Question="Is there anything else I can assist you with today?"
		Value="@additionalAssistance"
		OnOptionSelected="@((value) => additionalAssistance = value)" />

	}



}


<div class="container">
	<CallerTypeDropdown />
	<MemberStateDropdown StyleClass="toolText" OnStateSelected="@((value) => state = value)" />
</div>

<br/>
@if(state != null)
{
	brandName = state.PrimaryBrandName;
	siteName = state.PrimarySiteLink;
	if(state.Name.Equals("California (CA)"))
	{
		<div>
			<input name="egwp"
			type="checkbox"
			key="egwpCheckbox"
			checked="@tickedEgwp"
			@onchange=OnAltPlanSelected/>
			<span class="toolText">Group name begins with SP?</span>

			<input name="dualAlign"
			type="checkbox"
			key="dualCheckbox"
			checked ="@tickedDual"
			@onchange=OnDualSelected />
			<span class="toolText">Plan name is Wellcare dual align??</span>
		</div>

		if (tickedDual == true)
			brandName = state.TeriataryBrandName;
		if (tickedEgwp == true)
		{
			brandName = state.SecondaryBrandName;
			siteName = state.SecondarySiteLink;
		}



	}

	if (state.Name.Equals("Oregon (OR)"))
	{
		<div>
			<input name="egwp"
			type="checkbox"
			key="egwpCheckbox"
			checked="@tickedTrillium"
			@onchange=OnTrillium />
			<span class="toolText">Group name is trillium?</span>


		</div>

		if (tickedTrillium == true)
		{
			brandName = state.SecondaryBrandName;
			siteName = state.SecondarySiteLink;
		}


	}
	<p class="memberText">State Brand:&nbsp;<span class="text"> @brandName</span></p>
	<p class="memberText">State Site:&nbsp;<a target="_blank" href=@siteName>@siteName</a></p>

}
@if (stateContainer.CallerType != CallerType.Member && stateContainer.CallerType != CallerType.Select)
{
	<YesOrNoChoiceBubble StyleClass="memberText"
	Question="Verbal auth obtained?"
	Value="@gotVerbal"
	OnOptionSelected="@((value) => gotVerbal = value )" />
}

<TextField @ref="reasonField" Label="Call Reason: - today you called us because..."/>
<TextField @ref="actionField" Label="Call Action:"  />
<TextField @ref="resolutionField" Label="Call Resolution: - and I've ...'" />
<br />
<div class="block">
	<button @onclick=GenerateSummary class="button textStyle">Generate Summary</button>
	<button @onclick=CopyNotes class="button textStyle">Copy Notes</button>
</div>

<div class="block">
	<input id="search" type="text" @bind=searchText />
	<button @onclick="OpenResearchLink" >Search Central Point</button>
</div>




@if(showSummary == true)
{
	<p class="text"><span class="memberText">Summarize: </span> @summaryText</p>
	<YesOrNoChoiceBubble 
	StyleClass="memberText"
	Question="Member wants to take survey?"
	Value="@afterCallSurvey"
	OnOptionSelected="@((value) =>  afterCallSurvey = value)"
	/>

	if(afterCallSurvey == 0)
	{
		<p class="text">Thank you for that. Just as a reminder, on the first question 1 is dissatisfied and 5 is very satisfied. Thank you for calling @brandName. Have a great day and bye for now.</p>
	}
	else if(afterCallSurvey == 1)
	{
		<p class="text">Alright well in that case disconnect whenever you're ready. Thank you for calling @brandName. Have a great day and bye for now.</p>
	}
}
else if(showError == true)
{
	<p class="toolText">@errorText</p>
}
@code {
	private string searchText;
	private int afterCallSurvey = -1;
	private TextField reasonField;
	private TextField actionField;
	private TextField resolutionField;
	private MainPage thisInstance = null;
	private bool greetedMember = false;
	private bool confirmedName = false; 
	private bool confirmedCaller = false;
	private bool thirdPartyConfirmed = false;
	private string brandName = "Wellcare by Allwell";
	private string siteName = "";
	private int verifiedHIPPA = -1;
	private int isFirstCall = -1;
	private string? callReason;
	private string? callAction;
	private string? callResolution;
	private int gotVerbal = -1;

	private bool offeredAssistance = false;
	private bool probed = false;
	private bool willingnessStatement = false;
	private bool firstTimeCalling = false;
	private bool shownEmpathy = false;
	private bool builtRapport = false;
	private bool planSummary = false;
	private bool demographics = false;



	private bool professionalism;
	private bool disclaimers;
	private bool fcrVerified;

	private bool additionalAssistance = false;


	private State? state;


	private bool tickedEgwp = false;
	private bool tickedDual = false;

	private bool tickedTrillium = false;


	protected override void OnInitialized()
	{
		thisInstance = this;
	}
	private void OnTrillium(ChangeEventArgs changeEventArgs)
	{
		var val = bool.Parse(changeEventArgs.Value.ToString());
		tickedTrillium = val;
		StateHasChanged();
	}
	private void OnAltPlanSelected(ChangeEventArgs changeEventArgs)
	{
		var val = bool.Parse(changeEventArgs.Value.ToString());
		tickedEgwp = val;
		if (val == true)
		{
			tickedDual = false;
		}


		StateHasChanged();
	}

	private void OnDualSelected(ChangeEventArgs changeEventArgs)
	{
		var val = bool.Parse(changeEventArgs.Value.ToString());
		tickedDual = val;
		if (val == true)
		{
			tickedEgwp = false;
		}
		StateHasChanged();
	}

	private bool showSummary = false;
	private bool showError = false;
	private string errorText = string.Empty;
	private string summaryText = string.Empty;
	private void GenerateSummary()
	{
		if(reasonField.RecognizedText == string.Empty)
		{
			errorText = "Call Reason cannot be empty.";
			showError = true;
			showSummary = false;
			return;
		}

		if(actionField.RecognizedText == string.Empty)
		{
			errorText = "Call Action cannot be empty.";
			showError = true;
			showSummary = false;
			return;
		}

		if(resolutionField.RecognizedText == string.Empty)
		{
			errorText = "Call Resolution cannot be empty.";
			showError = true;
			showSummary = false;
			return;
		}
		if(state == null)
		{
			errorText = "You must select a state.";
			showError = true;
			showSummary = false;
			return;
		}

		if(stateContainer.CallerType == CallerType.Select)
		{
			errorText = "You must select a caller type.";
			showError = true;
			showSummary = false;
			return;
		}

		summaryText = "Just to summarize what we did today, you called us to " + reasonField.RecognizedText + " and what I did was " + resolutionField.RecognizedText + ". Additionally we do have self service options at our website, " + siteName + " where you can print new id cards in case they're lost, view providers and specialists covered by your plan, and view your current claims and authorizations. Now since you didn't need any further help right now, would you like to stay on the line for a brief survey on how I have assisted you today?";
		showError = false;
		showSummary = true;
	}

	private async Task CopyNotes()
	{
		string notes = "Caller Name:";
		notes += "\nInteraction ID:";
		notes += "\nCallback Number:";
		notes += "\nCaller Type: " + stateContainer.CallerType.ToString();

		if(gotVerbal == 0)
			notes += "\nObtained verbal authorization for: ";

		if (verifiedHIPPA == 1)
			notes += "\nVerified HIPPA for caller";

		if (planSummary == true)
			notes += "\nWent over plan summary.";

		if (demographics == true)
			notes += "\nWent over demographics.";
		if (isFirstCall == 0)
			notes += "\nThis is the first time calling about this.";

		if (isFirstCall == 1)
			notes += "\nThis is NOT the first time calling about this.";


		notes += "\nCall Reason: " + reasonField.RecognizedText;
		notes += "\nCall Action: " + actionField.RecognizedText;
		notes += "\nCall Resolution: " + resolutionField.RecognizedText;

		if(fcrVerified == true && additionalAssistance == true)
		{
			notes += "\nMember understood all information provided and didn't need any additional assistance.";
		}
		await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", notes);

	}

	private async void OpenResearchLink()
	{
		await JSRuntime.InvokeVoidAsync("openResearchLinks", searchText);
	}
}
