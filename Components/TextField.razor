@inject IJSRuntime JS
@using Toolbelt.Blazor.SpeechRecognition
@inject SpeechRecognition SpeechRecognition

<div>
    <label class="label textStyle" for="@Label">@Label</label>
    <br />
    <!-- Textarea for manual typing and speech results -->
    <textarea class="textBox textStyle" id="@Label" value="@CombinedText" @oninput="OnInput" rows="6"></textarea>
    <br />
    <!-- Button to Start/Stop Recognition when Pressed -->
    <button class="button textStyle" @onmousedown="StartRecognition" @onmouseup="StopRecognition" @onmouseleave="StopRecognition">
        🎤 Hold for voice input
    </button>
</div>

<style>
    .final {
        display: flex;
        width: auto;
        display: block;
        height: inherit;
        min-height: 150px;
    }

    .textStyle {
        color: #B2B0BF;
        font-weight: 700;
        font-size: 18px;
        border: none;
    }

    .label {
        margin-left: 8px;
    }

    .button {
        margin-left: 8px;
    }

    .textBox {
        width: 95%;
        margin-left: 8px;
        min-height: 150px;
        max-width:450px;
        overflow:hidden;
        field-sizing: content;
        resize: none;
        background-color: #151B23;
        outline-width: 1px;
        border: none;
        outline: 1px solid rgba(61, 68, 77, 0.75);
    }

        .textBox:focus {
            border: none;
            outline: 1px solid rgba(61, 68, 77, 1);
        }

    .button {
        background-color: #151B23;
    }

    .interim {
        color: #757575; /* Gray color to differentiate interim text */
    }
</style>

@code {
    [Parameter]
    public string RecognizedText { get; set; } = string.Empty;

    private bool isListening { get; set; } = false;
    private bool isTyping { get; set; } = false;  // Track if the user is typing manually
    private bool isFocused { get; set; } = false; // Track if the textarea is focused
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> OnValueChanged { get; set; }

    private bool available = true;
    private string? interimResults;

    // Computed property to combine RecognizedText and interimResults
    private string CombinedText => RecognizedText + interimResults;

    protected override void OnInitialized()
    {
        SpeechRecognition.Lang = "en-US";
        SpeechRecognition.InterimResults = true;
        SpeechRecognition.Continuous = true;
        SpeechRecognition.Result += OnSpeechRecognized;
        SpeechRecognition.End += OnSpeechEnded;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            available = await SpeechRecognition.IsAvailableAsync();
            StateHasChanged();
        }
    }

    private void OnInput(ChangeEventArgs e)
    {
        // Update RecognizedText when the user types in the textarea
        RecognizedText = e.Value?.ToString() ?? string.Empty;
    }

    private async void OnSpeechRecognized(object sender, SpeechRecognitionEventArgs args)
    {
        if (isTyping || isFocused) return; // Prevent speech recognition from updating while typing

        var interimText = string.Empty;

        for (int i = args.ResultIndex; i < args.Results.Length; ++i)
        {
            if (args.Results[i].IsFinal)
            {
                // Append finalized speech input
                RecognizedText += args.Results[i].Items[0].Transcript + " ";
                interimResults = null; // Clear interim results
            }
            else
            {
                // Store interim results
                interimText += args.Results[i].Items[0].Transcript + " ";
            }
        }

        interimResults = interimText.Trim();
        StateHasChanged();
    }

    private async Task StartRecognition()
    {
        if (!isListening)
        {
            isListening = true;
            await SpeechRecognition.StartAsync();
        }
    }

    private async Task StopRecognition()
    {
        if (isListening)
        {
            await SpeechRecognition.StopAsync();
        }
    }

    private void OnSpeechEnded(object sender, EventArgs args)
    {
        if (isListening)
        {
            isListening = false;
            interimResults = null; // Clear interim results when speech ends

            StateHasChanged();
        }
    }
}
